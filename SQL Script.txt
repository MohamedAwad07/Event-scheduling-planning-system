CREATE TABLE USERS
(
  UserID NUMBER(10) PRIMARY KEY NOT NULL,
  Username VARCHAR2(25) NOT NULL,
  Email VARCHAR2(50) UNIQUE NOT NULL,
  Password VARCHAR2(25) NOT NULL
);

CREATE TABLE EVENTS
(
  EventID NUMBER(10) PRIMARY KEY NOT NULL,
  EventName VARCHAR2(25) NOT NULL,
  StartDateTime TIMESTAMP NOT NULL,
  EndDateTime TIMESTAMP NOT NULL,
  ReminderDateTime TIMESTAMP NOT NULL,
  EventLocation VARCHAR2(25) NOT NULL,
  EventStatus VARCHAR2(10) NOT NULL,
  UserID NUMBER(10) REFERENCES USERS(UserID) NOT NULL
);


-- Insert 10 rows into USERS table
INSERT INTO USERS VALUES (1, 'Manga', 'manga@ismmaila.com', '123');
INSERT INTO USERS VALUES (2, 'Batatis', 'Batatis@Crispy.com', '123');
INSERT INTO USERS VALUES (3, 'John', 'john@example.com', 'password123');
INSERT INTO USERS VALUES (4, 'Alice', 'alice@example.com', 'alicepassword');
INSERT INTO USERS VALUES (5, 'Bob', 'bob@example.com', 'bobpassword');
INSERT INTO USERS VALUES (6, 'David', 'david@example.com', 'davidpassword');
INSERT INTO USERS VALUES (7, 'Emily', 'emily@example.com', 'emilypassword');
INSERT INTO USERS VALUES (8, 'Frank', 'frank@example.com', 'frankpassword');
INSERT INTO USERS VALUES (9, 'Grace', 'grace@example.com', 'gracepassword');
INSERT INTO USERS VALUES (10, 'Henry', 'henry@example.com', 'henrypassword');

-- Insert 10 rows into EVENTS table
INSERT INTO EVENTS VALUES (1, 'Event 1', TIMESTAMP '2024-05-03 10:00:00', TIMESTAMP '2024-05-03 12:00:00', TIMESTAMP '2024-05-03 09:30:00', 'Location 1', 'done', 1);
INSERT INTO EVENTS VALUES (2, 'Event 2', TIMESTAMP '2024-05-04 13:00:00', TIMESTAMP '2024-05-04 15:00:00', TIMESTAMP '2024-05-04 12:30:00', 'Location 2', 'new', 2);
INSERT INTO EVENTS VALUES (3, 'Event 3', TIMESTAMP '2024-05-05 16:00:00', TIMESTAMP '2024-05-05 18:00:00', TIMESTAMP '2024-05-05 15:30:00', 'Location 3', 'done', 3);
INSERT INTO EVENTS VALUES (4, 'Event 4', TIMESTAMP '2024-05-06 09:00:00', TIMESTAMP '2024-05-06 11:00:00', TIMESTAMP '2024-05-06 08:30:00', 'Location 4', 'new', 4);
INSERT INTO EVENTS VALUES (5, 'Event 5', TIMESTAMP '2024-05-07 14:00:00', TIMESTAMP '2024-05-07 16:00:00', TIMESTAMP '2024-05-07 13:30:00', 'Location 5', 'done', 5);
INSERT INTO EVENTS VALUES (6, 'Event 6', TIMESTAMP '2024-05-08 11:00:00', TIMESTAMP '2024-05-08 13:00:00', TIMESTAMP '2024-05-08 10:30:00', 'Location 6', 'new', 6);
INSERT INTO EVENTS VALUES (7, 'Event 7', TIMESTAMP '2024-05-09 18:00:00', TIMESTAMP '2024-05-09 20:00:00', TIMESTAMP '2024-05-09 17:30:00', 'Location 7', 'done', 7);
INSERT INTO EVENTS VALUES (8, 'Event 8', TIMESTAMP '2024-05-10 15:00:00', TIMESTAMP '2024-05-10 17:00:00', TIMESTAMP '2024-05-10 14:30:00', 'Location 8', 'new', 8);
INSERT INTO EVENTS VALUES (9, 'Event 9', TIMESTAMP '2024-05-11 12:00:00', TIMESTAMP '2024-05-11 14:00:00', TIMESTAMP '2024-05-11 11:30:00', 'Location 9', 'done', 9);
INSERT INTO EVENTS VALUES (10, 'Event 10', TIMESTAMP '2024-05-12 08:00:00', TIMESTAMP '2024-05-12 10:00:00', TIMESTAMP '2024-05-12 07:30:00', 'Location 10', 'new', 10);

commit;




create or replace
PROCEDURE Login
(Uname  VARCHAR2 ,  Upass VARCHAR2 , U_id out NUMBER)
as
begin
select  USERID INTO U_id
from USERS 
where USERS.username = Uname and USERS.password = Upass;
end;



create or replace PROCEDURE getUserId 
(UID out NUMBER )
as
BEGIN
SELECT Max(USERID) INTO UID
from USERS ;
end ;

create or replace PROCEDURE getEventId 
(EID out NUMBER )
as
BEGIN
SELECT Max(EVENTID) INTO EID
from EVENTS ;
end ;


create or replace
PROCEDURE displayEventsByStartDate
(U_id  VARCHAR2 , cur out sys_refcursor)
as
begin
open cur for
select  *  
from EVENTS 
where U_id = EVENTS.USERID 
Order by EVENTS.STARTDATETIME ;
end;


create or replace
PROCEDURE filterDoneEvents
(U_id  VARCHAR2 , cur out sys_refcursor)
as
begin
open cur for
select  *  
from EVENTS 
where U_id = EVENTS.USERID and EVENTS.EVENTSTATUS = 'done'
Order by EVENTS.ENDDATETIME ;
end;

create or replace
PROCEDURE filterByReminder
(U_id  VARCHAR2 , cur out sys_refcursor)
as
begin
open cur for
select  *  
from EVENTS 
where U_id = EVENTS.USERID 
Order by EVENTS.REMINDERDATETIME ;
end;

create or replace
PROCEDURE CheckEventOverlap
(
    p_userid NUMBER,
    p_StartDateTime TIMESTAMP,
    p_EndDateTime TIMESTAMP,
    p_Overlap OUT NUMBER
)
AS
    v_Count NUMBER := 0;
BEGIN
    SELECT COUNT(*)
    INTO v_Count
    FROM EVENTS
    WHERE p_enddatetime >= startdatetime
    AND p_startdatetime <= enddatetime
    AND p_userid = userid;

    IF v_Count > 0 THEN
        p_Overlap := 1; -- Overlap detected
    ELSE
        p_Overlap := 0; -- No overlap
    END IF;
END;

commit;